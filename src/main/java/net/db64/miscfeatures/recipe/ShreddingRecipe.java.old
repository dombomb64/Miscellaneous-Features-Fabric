package net.db64.miscfeatures.recipe;

import com.mojang.serialization.Codec;
import net.minecraft.inventory.RecipeInputInventory;
import net.minecraft.inventory.SimpleInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.recipe.Ingredient;
import net.minecraft.recipe.Recipe;
import net.minecraft.recipe.RecipeSerializer;
import net.minecraft.recipe.RecipeType;
import net.minecraft.recipe.book.CraftingRecipeCategory;
import net.minecraft.registry.DynamicRegistryManager;
import net.minecraft.util.Identifier;
import net.minecraft.util.collection.DefaultedList;
import net.minecraft.world.World;

public class ShreddingRecipe implements Recipe<SimpleInventory> {
	private final Identifier id;
	private final ItemStack output;
	private final DefaultedList<Ingredient> recipeItems;
	
	public ShreddingRecipe(Identifier id, ItemStack output, DefaultedList<Ingredient> recipeItems) {
		this.id = id;
		this.output = output;
		this.recipeItems = recipeItems;
	}
	
	@Override
	public boolean matches(SimpleInventory inventory, World world) {
		return false;
	}

	@Override
	public ItemStack craft(SimpleInventory inventory, DynamicRegistryManager registryManager) {
		return null;
	}

	@Override
	public boolean fits(int width, int height) {
		return false;
	}

	@Override
	public ItemStack getResult(DynamicRegistryManager registryManager) {
		return null;
	}

	@Override
	public RecipeSerializer<?> getSerializer() {
		return null;
	}

	@Override
	default public RecipeType<?> getType() {
		return ModRecipeTypes.SHREDDING;
	}

	public CraftingRecipeCategory getCategory();
	
	public static class Type implements RecipeType<ShreddingRecipe> {
		private Type() {}
		public static final Type INSTANCE = new Type();
		public static final String ID = "shredding";
	}
	
	public static class Serializer implements RecipeSerializer<ShreddingRecipe> {
		public static final Serializer INSTANCE = new Serializer();
		public static final String ID = "shredding";

		@Override
		public Codec<ShreddingRecipe> codec() {
			return null;
		}

		@Override
		public ShreddingRecipe read(PacketByteBuf buf) {
			return null;
		}

		@Override
		public void write(PacketByteBuf buf, ShreddingRecipe recipe) {

		}
	}
}
